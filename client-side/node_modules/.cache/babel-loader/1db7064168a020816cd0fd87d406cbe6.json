{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Faiyaz\\\\Desktop\\\\ffu\\\\FYP-21\\\\football-tournaments\\\\client-side\\\\src\\\\components\\\\PostTournament.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../utility/MyButton'; // MUI Stuff\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // icons\n\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { postTournament } from '../redux/actions/dataActions';\n\nconst styles = theme => ({ ...theme.forms,\n  submitButton: {\n    position: 'relative'\n  },\n  progressSpinner: {\n    position: 'absolute'\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '90%',\n    top: '10%'\n  }\n});\n\nclass PostTournament extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      body: '',\n      errors: {}\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.postTournament({\n        body: this.state.body\n      });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    const {\n      classes,\n      UI: {\n        loading\n      }\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MyButton, {\n        onClick: this.handleOpen,\n        tip: \"Post a Tournament\",\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: this.state.open,\n        onClose: this.handleClose,\n        fullWidth: true,\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(MyButton, {\n          tip: \"Close\",\n          onClick: this.handleClose,\n          tipClassName: classes.closeButton,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Post a new Tournament\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              name: \"body\",\n              type: \"text\",\n              label: \"Tournament name\",\n              multiline: true,\n              rows: \"3\",\n              placeholder: \"tournament name\",\n              error: errors.body ? true : false,\n              helperText: errors.body,\n              className: classes.textField,\n              onChange: this.handleChange,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              className: classes.submitButton,\n              disabled: loading,\n              children: [\"Submit\", loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 30,\n                className: classes.progressSpinner\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nPostTournament.propTypes = {\n  postTournament: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, {\n  postTournament\n})(withStyles(styles)(PostTournament));","map":{"version":3,"sources":["C:/Users/Faiyaz/Desktop/ffu/FYP-21/football-tournaments/client-side/src/components/PostTournament.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","Button","TextField","Dialog","DialogContent","DialogTitle","CircularProgress","AddIcon","CloseIcon","connect","postTournament","styles","theme","forms","submitButton","position","progressSpinner","closeButton","left","top","PostTournament","state","open","body","errors","handleOpen","setState","handleClose","handleChange","event","target","name","value","handleSubmit","preventDefault","props","componentWillReceiveProps","nextProps","UI","render","classes","loading","textField","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport MyButton from '../utility/MyButton';\r\n// MUI Stuff\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n// icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n// Redux stuff\r\nimport { connect } from 'react-redux';\r\nimport { postTournament } from '../redux/actions/dataActions';\r\n\r\nconst styles = theme => ({\r\n    ...theme.forms,\r\n    submitButton:{\r\n        position: 'relative'\r\n    },\r\n    progressSpinner: {\r\n        position: 'absolute'\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        left: '90%',\r\n        top: '10%'\r\n    }\r\n})\r\n\r\nclass PostTournament extends Component {\r\n    state = {\r\n        open: false,\r\n        body: '',\r\n        errors: {}\r\n    };\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.UI.errors){\r\n            this.setState({\r\n                errors: nextProps.UI.errors\r\n            });\r\n        }\r\n    }\r\n    handleOpen = () => {\r\n        this.setState({ open: true })\r\n    };\r\n    handleClose = () => {\r\n        this.setState({ open: false })\r\n    };\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    };\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.postTournament({ body: this.state.body });\r\n      };\r\n    render(){\r\n        const { errors } = this.state;\r\n        const { classes, UI: { loading }} = this.props;\r\n        return (\r\n            <Fragment>\r\n                <MyButton onClick={this.handleOpen} tip=\"Post a Tournament\">\r\n                    <AddIcon/>\r\n                </MyButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} fullWidth maxWidth=\"sm\">\r\n                    <MyButton tip=\"Close\" onClick={this.handleClose} tipClassName={classes.closeButton}>\r\n                        <CloseIcon/>\r\n                    </MyButton>\r\n                    <DialogTitle>Post a new Tournament</DialogTitle>\r\n                    <DialogContent>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <TextField \r\n                                name=\"body\" \r\n                                type=\"text\" \r\n                                label=\"Tournament name\" \r\n                                multiline \r\n                                rows=\"3\" \r\n                                placeholder=\"tournament name\" \r\n                                error={errors.body ? true : false} \r\n                                helperText={errors.body} \r\n                                className={classes.textField}\r\n                                onChange={this.handleChange}\r\n                                fullWidth\r\n                                />\r\n                                <Button type=\"submit\" variant=\"contained\" color=\"primary\"\r\n                                    className={classes.submitButton} disabled={loading}>\r\n                                        Submit\r\n                                        {loading && (\r\n                                            <CircularProgress size={30} className={classes.progressSpinner}/>\r\n                                        )}\r\n                                </Button>\r\n                        </form>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nPostTournament.propTypes = {\r\n    postTournament: PropTypes.func.isRequired,\r\n    UI: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    UI: state.UI\r\n})\r\n\r\nexport default connect(mapStateToProps, { postTournament })(withStyles(styles)(PostTournament))\r\n"]},"metadata":{},"sourceType":"module"}